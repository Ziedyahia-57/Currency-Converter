name: Update Currency Rates

on:
  schedule:
    - cron: '0 12 * * *'  # Daily at 12:00 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-rates:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: Install dependencies
        run: |
          set -euo pipefail
          sudo apt-get update -qq
          sudo apt-get install -y -qq jq curl

      - name: Fetch traditional exchange rates
        id: fetch-traditional
        run: |
          set -euo pipefail
          API_URL="https://api.exchangerate.host/live?access_key=$API_KEY""
          echo "::group::Fetching traditional rates from $API_URL"
          curl -sSf --retry 3 --retry-delay 5 --max-time 15 \
            -H "User-Agent: GitHub Actions Currency Updater" \
            "$API_URL" > traditional_response.json
          echo "Raw API response (first 100 chars):"
          head -c 100 traditional_response.json
          echo -e "\n::endgroup::"

          echo "::group::Processing traditional rates"
          jq -e '
            if (.rates | length) > 0 then
              {
                disclaimer: "Data sourced from exchangerate.host",
                timestamp: ((.date // (now | todateiso8601)) + "T00:00:00Z"),
                base: (.base // "USD"),
                rates: ({"USD": 1} + (.rates // {}))
              }
            else
              error("No rates found in API response")
            end
          ' traditional_response.json > traditional_rates.json
          echo "Processed $(jq '.rates | length' traditional_rates.json) currencies"
          echo "::endgroup::"

      - name: Fetch cryptocurrency rates (excluding BTC)
        id: fetch-crypto
        run: |
          set -euo pipefail
          echo "::group::Fetching crypto rates (excluding BTC)"
          echo "Waiting 5s to avoid rate limits..."
          sleep 5

          API_URL="https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=12&page=1&sparkline=false"
          echo "Fetching from CoinGecko: $API_URL"
          curl -sSf --retry 5 --retry-delay 10 --max-time 20 \
            -H "User-Agent: GitHub Actions Currency Updater" \
            "$API_URL" > crypto_response.json
          echo "Raw API response (first 200 chars):"
          head -c 200 crypto_response.json
          echo -e "\n::endgroup::"

          echo "::group::Processing crypto data"
          jq -e '
            def safe_upcase: try ascii_upcase catch null;
            [ .[]
              | select(
                  .symbol? and
                  (.symbol | type == "string") and
                  .current_price? and
                  (.current_price | type == "number") and
                  ((.symbol | ascii_upcase) != "BTC")
                )
            ][0:10] as $top10 |
            if ($top10 | length) < 5 then
              error("Insufficient valid cryptos after filtering (found \($top10|length))")
            else
              {
                disclaimer: "Data sourced from CoinGecko (top 10 cryptos excluding BTC)",
                timestamp: (now | todateiso8601),
                base: "USD",
                rates: reduce $top10[] as $coin ({}; .[($coin.symbol | safe_upcase // "INVALID")] = $coin.current_price)
              }
            end
          ' crypto_response.json > crypto_rates.json
          echo "Processed $(jq '.rates | length' crypto_rates.json) cryptos:"
          jq '.rates | keys' crypto_rates.json
          echo "::endgroup::"

      - name: Validate responses
        run: |
          set -euo pipefail
          echo "::group::Validating responses"
          # Check files exist and contain valid JSON
          jq -e '.' traditional_rates.json > /dev/null
          jq -e '.' crypto_rates.json > /dev/null

          # Verify BTC is not present (case sensitive since all symbols are upcased)
          if jq -e '.rates | has("BTC")' crypto_rates.json > /dev/null; then
            echo "::error::BTC was found in crypto rates when it should be excluded"
            jq '.rates.BTC' crypto_rates.json
            exit 1
          fi

          # Minimum counts
          TRADITIONAL_COUNT=$(jq '.rates | length' traditional_rates.json)
          CRYPTO_COUNT=$(jq '.rates | length' crypto_rates.json)

          if [[ "$TRADITIONAL_COUNT" -lt 10 ]]; then
            echo "::error::Too few traditional currencies: $TRADITIONAL_COUNT"
            exit 1
          fi

          if [[ "$CRYPTO_COUNT" -lt 5 ]]; then
            echo "::error::Too few cryptocurrencies: $CRYPTO_COUNT"
            exit 1
          fi
          echo "Validation passed"
          echo "::endgroup::"

      - name: Combine rates
        run: |
          set -euo pipefail
          echo "::group::Combining rates"
          jq -s '
            .[0] as $traditional |
            .[1] as $crypto |
            {
              disclaimer: "Combined rates (traditional from exchangerate.host, crypto from CoinGecko excluding BTC)",
              timestamp: (now | todateiso8601),
              base: "USD",
              rates: ($traditional.rates + $crypto.rates),
              metadata: {
                last_updated: (now | todateiso8601),
                traditional_currencies: ($traditional.rates | length),
                cryptocurrencies: ($crypto.rates | length),
                btc_excluded: true
              }
            }
          ' traditional_rates.json crypto_rates.json > rates.json
          echo "Final combined rates:"
          jq '.rates | length' rates.json
          echo "::endgroup::"

      - name: Commit and push changes
        run: |
          set -euo pipefail
          echo "::group::Git operations"
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          git add rates.json

          if [[ -n "$(git status --porcelain)" ]]; then
            git commit -m "Auto-update rates [$(date -u +'%Y-%m-%dT%H:%MZ')] (BTC excluded)"
            git pull --rebase origin main
            git push origin HEAD:main
            echo "Changes pushed successfully"
          else
            echo "No changes to commit"
          fi
          echo "::endgroup::"

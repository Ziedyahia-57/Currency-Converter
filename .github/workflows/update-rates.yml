name: Update Currency Rates

on:
  schedule:
    - cron: '0 12 * * *'  # Daily at 12:00 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-rates:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: sudo apt-get install -y jq curl

      - name: Fetch traditional exchange rates
        id: fetch-traditional
        run: |
          # Try multiple API endpoints with fallback
          if ! curl -sSf --retry 3 --max-time 10 \
            "https://api.exchangerate.host/latest?base=USD" > traditional_response.json; then
            echo "::warning::Failed primary API endpoint, trying fallback..."
            if ! curl -sSf --retry 3 --max-time 10 \
              "https://api.exchangerate-api.com/v4/latest/USD" > traditional_response.json; then
              echo "::error::All API endpoints failed"
              exit 1
            fi
          fi

          # Debug: Show API response
          echo "API Response:"
          cat traditional_response.json
          echo ""

          # More resilient processing with multiple format support
          if ! jq -e '
            # Try different response formats
            if .rates then 
              {"USD": 1} + (.rates | with_entries(select(.value|type == "number")))
            elif .quotes then 
              {"USD": 1} + (.quotes | with_entries(.key |= sub("^USD"; "")))
            else
              error("Unsupported response format")
            end | {
              disclaimer: "Data sourced from exchangerate API",
              timestamp: (.timestamp // .date // now | todate),
              base: "USD",
              rates: .
            }
          ' traditional_response.json > traditional_rates.json; then
            echo "::error::Failed to process traditional rates"
            echo "Raw response:"
            cat traditional_response.json
            exit 1
          fi

      - name: Fetch cryptocurrency rates
        id: fetch-crypto
        run: |
          # Fetch with multiple fallback options
          if ! curl -sSf --retry 3 --max-time 10 \
            "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=20&page=1" > crypto_response.json; then
            echo "::warning::Primary CoinGecko failed, trying alternative..."
            if ! curl -sSf --retry 3 --max-time 10 \
              "https://api.coincap.io/v2/assets?limit=20" > crypto_response.json; then
              echo "::error::All crypto API endpoints failed"
              exit 1
            fi
          fi

          # Debug: Show API response
          echo "Crypto API Response:"
          head -c 1000 crypto_response.json  # Show first 1000 chars to avoid huge logs
          echo ""

          # Process with multiple format support
          if ! jq -e '
            def try_coingecko:
              if (. | type) == "array" then
                map(select(.symbol? and .symbol != "btc" and .current_price?))[0:10] |
                reduce .[] as $coin ({}; .[($coin.symbol|ascii_upcase)] = $coin.current_price)
              else empty end;
            
            def try_coincap:
              if .data? then
                .data | map(select(.symbol? and .symbol != "BTC" and .priceUsd?))[0:10] |
                reduce .[] as $coin ({}; .[$coin.symbol] = ($coin.priceUsd | tonumber))
              else empty end;
            
            (try_coingecko // try_coincap // {}) | {
              disclaimer: "Data sourced from crypto API",
              timestamp: (now|todate),
              base: "USD",
              rates: .
            }
          ' crypto_response.json > crypto_rates.json; then
            echo "::error::Failed to process crypto rates"
            echo "Raw response start:"
            head -c 500 crypto_response.json
            exit 1
          fi

      - name: Combine rates
        run: |
          jq -s '
            .[0] as $traditional | 
            .[1] as $crypto |
            {
              disclaimer: "Combined currency rates",
              timestamp: (now|todate),
              base: "USD",
              last_updated: (now|todate),
              rates: ($traditional.rates + $crypto.rates),
              metadata: {
                traditional_count: ($traditional.rates|length),
                crypto_count: ($crypto.rates|length),
                sources: [
                  $traditional.disclaimer,
                  $crypto.disclaimer
                ]
              }
            }
          ' traditional_rates.json crypto_rates.json > rates.json

          # Debug: Show final output
          echo "Final rates.json:"
          cat rates.json

      - name: Commit changes
        run: |
          if [ ! -f rates.json ]; then
            echo "::error::rates.json not found"
            exit 1
          fi

          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add rates.json
            
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "Update rates: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            git push
            echo "::notice::Rates updated successfully"
          else
            echo "::notice::No rate changes detected"
          fi

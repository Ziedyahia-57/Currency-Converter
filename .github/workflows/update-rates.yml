name: Update Currency Rates

on:
  schedule:
    - cron: '0 12 * * *'  # Daily at 12:00 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-rates:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: sudo apt-get install -y jq curl

      - name: Fetch traditional exchange rates
        id: fetch-traditional
        run: |
          # Fetch with more resilient error handling
          if ! curl -sSf --retry 3 --max-time 10 \
            "https://api.exchangerate.host/latest?base=USD" > traditional_response.json; then
            echo "::error::Failed to fetch from exchangerate.host API"
            exit 1
          fi

          # More flexible response processing
          if ! jq -e '
            if .success == true or .success == null then 
              {
                disclaimer: "Data sourced from exchangerate.host",
                timestamp: (.date // now|todate),
                base: .base // "USD",
                rates: ({"USD": 1} + (.rates // {}))
              }
            else 
              error("API error: \(.error?.type // "unknown error")")
            end
          ' traditional_response.json > traditional_rates.json; then
            echo "::error::Failed to process API response"
            echo "Raw API response:"
            cat traditional_response.json
            exit 1
          fi

      - name: Fetch cryptocurrency rates
        id: fetch-crypto
        run: |
          # Fetch top 20 cryptos (we'll filter out BTC later)
          if ! curl -sSf --retry 3 --max-time 10 \
            "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=20&page=1" > crypto_response.json; then
            echo "::error::Failed to fetch from CoinGecko API"
            exit 1
          fi

          # Process response with better error handling
          if ! jq -e '
            try (
              map(select(.symbol != "btc" and .symbol != null)) | .[0:10] | 
              {
                disclaimer: "Data sourced from CoinGecko (top 10 cryptos by market cap excluding BTC)",
                timestamp: (now|todate),
                base: "USD",
                rates: reduce .[] as $coin ({}; .[($coin.symbol|ascii_upcase)] = $coin.current_price)
              }
            catch {
              disclaimer: "Error processing crypto data",
              timestamp: (now|todate),
              base: "USD",
              rates: {},
              error: (. // "unknown error")
            }
          ' crypto_response.json > crypto_rates.json; then
            echo "::error::Failed to process CoinGecko response"
            cat crypto_response.json
            exit 1
          fi

      - name: Combine rates into single file
        run: |
          jq -s '
            .[0] as $traditional | 
            .[1] as $crypto |
            {
              disclaimer: "Combined currency rates",
              timestamp: (now|todate),
              base: "USD",
              last_updated: (now|todate),
              rates: ($traditional.rates + $crypto.rates),
              metadata: {
                traditional_currencies: ($traditional.rates|length),
                cryptocurrencies: ($crypto.rates|length),
                sources: [
                  $traditional.disclaimer,
                  $crypto.disclaimer
                ],
                warnings: [
                  if $crypto.error then "Crypto data error: \($crypto.error)" else empty end
                ] | join(", ")
              }
            }
          ' traditional_rates.json crypto_rates.json > rates.json

      - name: Commit changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add rates.json
            
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "Update rates: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            git push
            echo "::notice::Rates updated successfully"
          else
            echo "::notice::No rate changes detected"
          fi
